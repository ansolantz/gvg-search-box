{"version":3,"sources":["components/SearchBar.js","components/WordsDisplay.js","lib/gavagai-api.js","pages/SearchPage.js","pages/WordInfoPage.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","handleSubmit","event","preventDefault","state","searchWord","language","console","log","handleSearchCallback","setState","errorMessage","handleChange","target","name","value","className","onSubmit","this","type","placeholder","onChange","Component","WordsDisplay","lang","similarWord","word","to","env","API_KEY","gavagaiAPI","GavagaiAPI","axios","create","baseURL","withCredentials","get","response","override","css","SearchPage","a","loading","getSimilarWords","similarWords","data","semanticallySimilarWords","error","length","map","index","key","sizeUnit","size","color","WordInfoPage","getSingelWordInfo","match","params","getWordInfo","wordInformation","wordInfo","frequency","documentFrequency","absoluteRank","relativeRank","vocabularySize","additionalInformation","Object","keys","link","href","onClick","history","go","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a5c7faf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchWord: '',\n      language: '',\n      errorMessage: ''\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (!this.state.searchWord) {\n      this.setState({ errorMessage: 'Please enter a word' })\n    } else if (!this.state.language) {\n      this.setState({ errorMessage: 'Please select a language' })\n    } else {\n      console.log(\"Search word: \", this.state.searchWord)\n      console.log(\"Language: \", this.state.language)\n      const { searchWord, language } = this.state\n      this.props.handleSearchCallback(searchWord, language);\n    }\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    return (\n      <div className=\"search-bar\">\n        <h1>Search for a word</h1>\n        <div>\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"inner-form\">\n              <div className=\"first-wrap\">\n                <input type=\"text\" className=\"search-field\" name=\"searchWord\" placeholder=\"Enter a word\"\n                  onChange={this.handleChange} />\n              </div>\n              <div className=\"second-wrap\">\n                <select name=\"language\" className=\"languages-select\" onChange={this.handleChange}>\n                  <option value=\"\">Language</option>\n                  <option value=\"en\">English</option>\n                  <option value=\"sv\">Swedish</option>\n                  <option value=\"es\">Spanish</option>\n                  <option value=\"fr\">France</option>\n                </select>\n              </div>\n              <div className=\"third-wrap\">\n                <button className=\"btn-search\" type=\"submit\">SEARCH</button>\n              </div>\n            </div>\n          </form>\n          <div className=\"error-message\">{this.state.errorMessage}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom'\nimport './WordDisplay.css';\n\nclass WordsDisplay extends Component {\n  render() {\n    const lang = this.props.language;\n    const similarWord = this.props.similarWord.word;\n    return (\n      <NavLink className=\"word-tag\" to={`/${lang}/${similarWord}`}>{similarWord}</NavLink>\n    );\n  }\n}\n\nexport default WordsDisplay;","\nimport axios from \"axios\";\nimport env from './../config/config.json';\n\nconsole.log(\"API Key \", env.API_KEY)\nclass GavagaiAPI {\n  constructor() {\n\n    this.GavagaiAPI = axios.create({\n      baseURL: \"https://api.gavagai.se/v3/lexicon\",\n      withCredentials: false\n    });\n  }\n\n  async getSimilarWords(lang, word) {\n    let response = await this.GavagaiAPI\n      .get(`/${lang}/${word}?apiKey=${env.API_KEY}&additionalFields=SEMANTICALLY_SIMILAR_WORDS`)\n    return response;\n  }\n\n  async getWordInfo(lang, word) {\n    let response = await this.GavagaiAPI\n      .get(`/${lang}/${word}?apiKey=${env.API_KEY}`)\n    return response;\n  }\n}\n\nconst gavagaiAPI = new GavagaiAPI();\nexport default gavagaiAPI;\n","import React, { Component } from 'react';\nimport SearchBar from './../components/SearchBar'\nimport WordsDisplay from './../components/WordsDisplay'\nimport gavagaiAPI from './../lib/gavagai-api';\nimport './SearchPage.css';\nimport { css } from '@emotion/core';\nimport BeatLoader from 'react-spinners/BeatLoader';\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n`;\n\nclass SearchPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      similarWords: [],\n      word: '',\n      lang: '',\n      loading: false\n    }\n  }\n\n  handleSearchCallback = async (word, lang) => {\n    this.setState({ loading: true, word, lang })\n    let response = await gavagaiAPI.getSimilarWords(lang, word)\n\n    try {\n      console.log(\"Response: \", response)\n      this.setState({ similarWords: response.data.semanticallySimilarWords })\n      console.log(\"State: \", this.state.similarWords)\n      this.setState({ loading: false })\n    } catch (error) {\n      console.log(error)\n      this.setState({ loading: false })\n    }\n  }\n\n  render() {\n    const { similarWords, word, lang } = this.state\n    return (\n      <div className=\"page-container\">\n        <SearchBar handleSearchCallback={(word, language) => this.handleSearchCallback(word, language)} />\n        {this.state.similarWords.length > 0 &&\n          <div>\n            <h3 className=\"padding\">Similar words to {word}</h3>\n            <div className=\"word-display\">\n              {\n                similarWords.map((similarWord, index) => {\n                  return (\n                    <WordsDisplay key={index} similarWord={similarWord} language={lang} />\n                  )\n                })\n              }\n            </div>\n          </div>\n        }\n        <div className=\"sweet-loading\">\n          <BeatLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={10}\n            color={'#33ceff'}\n            loading={this.state.loading}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchPage;\n","import React, { Component } from 'react';\nimport gavagaiAPI from './../lib/gavagai-api';\nimport './WordInfoPage.css';\nimport { css } from '@emotion/core';\nimport BeatLoader from 'react-spinners/BeatLoader';\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n`;\n\nclass WordInfoPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      wordInfo: {},\n      searchWord: '',\n      errorMessage: '',\n      loading: false\n    }\n  }\n\n  componentDidMount() {\n    this.getSingelWordInfo();\n  }\n\n  getSingelWordInfo = async () => {\n    const { lang, word } = this.props.match.params\n    this.setState({ searchWord: word, loading: true })\n    let response = await gavagaiAPI.getWordInfo(lang, word)\n\n    try {\n      console.log(\"Response: \", response)\n      if (response.data.wordInformation) {\n        this.setState({ wordInfo: response.data.wordInformation, loading: false })\n      } else {\n        this.setState({ errorMessage: 'No information avaliable', loading: false })\n      }\n      console.log(\"State: \", this.state.wordInfo)\n    } catch (error) {\n      console.log(error)\n      this.setState({ loading: false })\n    }\n  }\n\n  render() {\n    const { frequency, documentFrequency, absoluteRank, relativeRank, vocabularySize, additionalInformation } = this.state.wordInfo\n    return (\n      <div className=\"page-container\">\n        {Object.keys(this.state.wordInfo).length > 0 &&\n          <div className=\"inner-container\">\n            <h1>More info about <i>'{this.state.searchWord}'</i></h1>\n            <div className=\"word-info-container\">\n              <div>\n                <p>Frequency: {frequency ? frequency : 'No frequency info available'}</p>\n                <p>Document Frequency: {documentFrequency ? documentFrequency : 'No document frequency info available'}</p>\n                <p>Absolute Rank: {absoluteRank ? absoluteRank : 'No absolute rank info available'}</p>\n                <p>Relative Rank: {relativeRank ? relativeRank : 'No relative rank info available'}</p>\n                <p>Vocabulary Size: {vocabularySize ? vocabularySize : 'No vocabulary size info available'}</p>\n                <p>Additional Information: {(additionalInformation && additionalInformation.link) ?\n                  <a href={additionalInformation.link} className=\"link\">{additionalInformation.link}</a>\n                  :\n                  'No additional info available'}\n                </p>\n              </div>\n            </div>\n            <div className=\"button-wrap\">\n              <button className=\"btn-back\" onClick={() => this.props.history.go(-1)} type=\"button\">BACK</button>\n            </div>\n          </div>\n        }\n        {this.state.errorMessage &&\n          <div>\n            <h1>More info about <i>'{this.state.searchWord}'</i></h1>\n            <div className=\"word-info-container\">\n              <p className=\"error-message\">{this.state.errorMessage} </p>\n            </div>\n            <div className=\"button-wrap\">\n              <button className=\"btn-back\" onClick={() => this.props.history.go(-1)} type=\"button\">BACK</button>\n            </div>\n          </div>\n        }\n        <div className='sweet-loading'>\n          <BeatLoader\n            css={override}\n            sizeUnit={\"px\"}\n            size={10}\n            color={'#33ceff'}\n            loading={this.state.loading}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WordInfoPage;\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport SearchPage from './pages/SearchPage';\nimport WordInfoPage from './pages/WordInfoPage';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='app-container'>\n        <Switch>\n          <Route exact path='/' component={SearchPage}></Route>\n          <Route exact path='/:lang/:word' component={WordInfoPage}></Route>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render((\n  <Router basename=\"gvg-search-box\">\n    <App />\n  </Router>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}